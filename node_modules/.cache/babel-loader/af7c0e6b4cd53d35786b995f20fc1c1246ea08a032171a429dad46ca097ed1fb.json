{"ast":null,"code":"var _jsxFileName = \"E:\\\\Sigma Web Development Course\\\\Emotion-Aware Virtual Listener\\\\src\\\\components\\\\MicButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MicButton({\n  isRecording,\n  setIsRecording,\n  onTranscriptUpdate\n}) {\n  _s();\n  const handleMicClick = () => {\n    if (!isRecording) {\n      // Start recording (mock implementation)\n      setIsRecording(true);\n      // Simulate transcription after 3 seconds\n      setTimeout(() => {\n        onTranscriptUpdate(\"I had a long day, I'm just tired of everything.\");\n        setIsRecording(false);\n      }, 3000);\n    } else {\n      setIsRecording(false);\n    }\n  };\n  useEffect(() => {\n    // Cleanup for recording (if needed)\n    return () => {\n      // Stop any ongoing recording\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center mb-6\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMicClick,\n      className: `p-4 rounded-full ${isRecording ? 'bg-red-500' : 'bg-blue-500'} text-white hover:${isRecording ? 'bg-red-600' : 'bg-blue-600'} transition-colors duration-200 flex items-center justify-center`,\n      children: isRecording ? /*#__PURE__*/_jsxDEV(MicOff, {\n        className: \"w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Mic, {\n        className: \"w-6 h-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(MicButton, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MicButton;\nexport default MicButton;\nvar _c;\n$RefreshReg$(_c, \"MicButton\");","map":{"version":3,"names":["React","useEffect","Mic","MicOff","jsxDEV","_jsxDEV","MicButton","isRecording","setIsRecording","onTranscriptUpdate","_s","handleMicClick","setTimeout","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Sigma Web Development Course/Emotion-Aware Virtual Listener/src/components/MicButton.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Mic, MicOff } from 'lucide-react';\r\n\r\nfunction MicButton({ isRecording, setIsRecording, onTranscriptUpdate }) {\r\n    const handleMicClick = () => {\r\n        if (!isRecording) {\r\n            // Start recording (mock implementation)\r\n            setIsRecording(true);\r\n            // Simulate transcription after 3 seconds\r\n            setTimeout(() => {\r\n                onTranscriptUpdate(\"I had a long day, I'm just tired of everything.\");\r\n                setIsRecording(false);\r\n            }, 3000);\r\n        } else {\r\n            setIsRecording(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Cleanup for recording (if needed)\r\n        return () => {\r\n            // Stop any ongoing recording\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"flex justify-center mb-6\">\r\n            <button\r\n                onClick={handleMicClick}\r\n                className={`p-4 rounded-full ${\r\n                    isRecording ? 'bg-red-500' : 'bg-blue-500'\r\n                } text-white hover:${\r\n                    isRecording ? 'bg-red-600' : 'bg-blue-600'\r\n                } transition-colors duration-200 flex items-center justify-center`}\r\n            >\r\n                {isRecording ? (\r\n                    <MicOff className=\"w-6 h-6\" />\r\n                ) : (\r\n                    <Mic className=\"w-6 h-6\" />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MicButton;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,GAAG,EAAEC,MAAM,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,SAASA,CAAC;EAAEC,WAAW;EAAEC,cAAc;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EACpE,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACJ,WAAW,EAAE;MACd;MACAC,cAAc,CAAC,IAAI,CAAC;MACpB;MACAI,UAAU,CAAC,MAAM;QACbH,kBAAkB,CAAC,iDAAiD,CAAC;QACrED,cAAc,CAAC,KAAK,CAAC;MACzB,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,MAAM;MACHA,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAEDP,SAAS,CAAC,MAAM;IACZ;IACA,OAAO,MAAM;MACT;IAAA,CACH;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACII,OAAA;IAAKQ,SAAS,EAAC,0BAA0B;IAAAC,QAAA,eACrCT,OAAA;MACIU,OAAO,EAAEJ,cAAe;MACxBE,SAAS,EAAE,oBACPN,WAAW,GAAG,YAAY,GAAG,aAAa,qBAE1CA,WAAW,GAAG,YAAY,GAAG,aAAa,kEACqB;MAAAO,QAAA,EAElEP,WAAW,gBACRF,OAAA,CAACF,MAAM;QAACU,SAAS,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAE9Bd,OAAA,CAACH,GAAG;QAACW,SAAS,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAC7B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACT,EAAA,CAxCQJ,SAAS;AAAAc,EAAA,GAATd,SAAS;AA0ClB,eAAeA,SAAS;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}